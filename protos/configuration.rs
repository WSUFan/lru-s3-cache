// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `configuration.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:EmptyProxyConfig)
pub struct EmptyProxyConfig {
    // special fields
    // @@protoc_insertion_point(special_field:EmptyProxyConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EmptyProxyConfig {
    fn default() -> &'a EmptyProxyConfig {
        <EmptyProxyConfig as ::protobuf::Message>::default_instance()
    }
}

impl EmptyProxyConfig {
    pub fn new() -> EmptyProxyConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EmptyProxyConfig>(
            "EmptyProxyConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EmptyProxyConfig {
    const NAME: &'static str = "EmptyProxyConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EmptyProxyConfig {
        EmptyProxyConfig::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EmptyProxyConfig {
        static instance: EmptyProxyConfig = EmptyProxyConfig {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EmptyProxyConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EmptyProxyConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EmptyProxyConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmptyProxyConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:S3ProxyConfig)
pub struct S3ProxyConfig {
    // message fields
    // @@protoc_insertion_point(field:S3ProxyConfig.bucket)
    pub bucket: ::std::string::String,
    // @@protoc_insertion_point(field:S3ProxyConfig.region)
    pub region: ::std::string::String,
    // @@protoc_insertion_point(field:S3ProxyConfig.endpoint)
    pub endpoint: ::std::string::String,
    // @@protoc_insertion_point(field:S3ProxyConfig.secret_id)
    pub secret_id: ::std::string::String,
    // @@protoc_insertion_point(field:S3ProxyConfig.access_key)
    pub access_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:S3ProxyConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a S3ProxyConfig {
    fn default() -> &'a S3ProxyConfig {
        <S3ProxyConfig as ::protobuf::Message>::default_instance()
    }
}

impl S3ProxyConfig {
    pub fn new() -> S3ProxyConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bucket",
            |m: &S3ProxyConfig| { &m.bucket },
            |m: &mut S3ProxyConfig| { &mut m.bucket },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "region",
            |m: &S3ProxyConfig| { &m.region },
            |m: &mut S3ProxyConfig| { &mut m.region },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "endpoint",
            |m: &S3ProxyConfig| { &m.endpoint },
            |m: &mut S3ProxyConfig| { &mut m.endpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secret_id",
            |m: &S3ProxyConfig| { &m.secret_id },
            |m: &mut S3ProxyConfig| { &mut m.secret_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "access_key",
            |m: &S3ProxyConfig| { &m.access_key },
            |m: &mut S3ProxyConfig| { &mut m.access_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<S3ProxyConfig>(
            "S3ProxyConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for S3ProxyConfig {
    const NAME: &'static str = "S3ProxyConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bucket = is.read_string()?;
                },
                18 => {
                    self.region = is.read_string()?;
                },
                26 => {
                    self.endpoint = is.read_string()?;
                },
                34 => {
                    self.secret_id = is.read_string()?;
                },
                42 => {
                    self.access_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.bucket.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bucket);
        }
        if !self.region.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.region);
        }
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.endpoint);
        }
        if !self.secret_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.secret_id);
        }
        if !self.access_key.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.access_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.bucket.is_empty() {
            os.write_string(1, &self.bucket)?;
        }
        if !self.region.is_empty() {
            os.write_string(2, &self.region)?;
        }
        if !self.endpoint.is_empty() {
            os.write_string(3, &self.endpoint)?;
        }
        if !self.secret_id.is_empty() {
            os.write_string(4, &self.secret_id)?;
        }
        if !self.access_key.is_empty() {
            os.write_string(5, &self.access_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> S3ProxyConfig {
        S3ProxyConfig::new()
    }

    fn clear(&mut self) {
        self.bucket.clear();
        self.region.clear();
        self.endpoint.clear();
        self.secret_id.clear();
        self.access_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static S3ProxyConfig {
        static instance: S3ProxyConfig = S3ProxyConfig {
            bucket: ::std::string::String::new(),
            region: ::std::string::String::new(),
            endpoint: ::std::string::String::new(),
            secret_id: ::std::string::String::new(),
            access_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for S3ProxyConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("S3ProxyConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for S3ProxyConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for S3ProxyConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:HttpServerConfig)
pub struct HttpServerConfig {
    // message fields
    // @@protoc_insertion_point(field:HttpServerConfig.ip_address)
    pub ip_address: ::std::string::String,
    // @@protoc_insertion_point(field:HttpServerConfig.port)
    pub port: i64,
    // special fields
    // @@protoc_insertion_point(special_field:HttpServerConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HttpServerConfig {
    fn default() -> &'a HttpServerConfig {
        <HttpServerConfig as ::protobuf::Message>::default_instance()
    }
}

impl HttpServerConfig {
    pub fn new() -> HttpServerConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ip_address",
            |m: &HttpServerConfig| { &m.ip_address },
            |m: &mut HttpServerConfig| { &mut m.ip_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &HttpServerConfig| { &m.port },
            |m: &mut HttpServerConfig| { &mut m.port },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HttpServerConfig>(
            "HttpServerConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HttpServerConfig {
    const NAME: &'static str = "HttpServerConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ip_address = is.read_string()?;
                },
                16 => {
                    self.port = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.ip_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ip_address);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.port);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.ip_address.is_empty() {
            os.write_string(1, &self.ip_address)?;
        }
        if self.port != 0 {
            os.write_int64(2, self.port)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HttpServerConfig {
        HttpServerConfig::new()
    }

    fn clear(&mut self) {
        self.ip_address.clear();
        self.port = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HttpServerConfig {
        static instance: HttpServerConfig = HttpServerConfig {
            ip_address: ::std::string::String::new(),
            port: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HttpServerConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HttpServerConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HttpServerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpServerConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ApplicationConfiguration)
pub struct ApplicationConfiguration {
    // message fields
    // @@protoc_insertion_point(field:ApplicationConfiguration.data_directory_path)
    pub data_directory_path: ::std::string::String,
    // @@protoc_insertion_point(field:ApplicationConfiguration.max_size)
    pub max_size: u64,
    // message oneof groups
    pub ProxyConfig: ::std::option::Option<application_configuration::ProxyConfig>,
    pub ServerConfig: ::std::option::Option<application_configuration::ServerConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:ApplicationConfiguration.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ApplicationConfiguration {
    fn default() -> &'a ApplicationConfiguration {
        <ApplicationConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl ApplicationConfiguration {
    pub fn new() -> ApplicationConfiguration {
        ::std::default::Default::default()
    }

    // .EmptyProxyConfig empty_proxy_config = 3;

    pub fn empty_proxy_config(&self) -> &EmptyProxyConfig {
        match self.ProxyConfig {
            ::std::option::Option::Some(application_configuration::ProxyConfig::EmptyProxyConfig(ref v)) => v,
            _ => <EmptyProxyConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_empty_proxy_config(&mut self) {
        self.ProxyConfig = ::std::option::Option::None;
    }

    pub fn has_empty_proxy_config(&self) -> bool {
        match self.ProxyConfig {
            ::std::option::Option::Some(application_configuration::ProxyConfig::EmptyProxyConfig(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_empty_proxy_config(&mut self, v: EmptyProxyConfig) {
        self.ProxyConfig = ::std::option::Option::Some(application_configuration::ProxyConfig::EmptyProxyConfig(v))
    }

    // Mutable pointer to the field.
    pub fn mut_empty_proxy_config(&mut self) -> &mut EmptyProxyConfig {
        if let ::std::option::Option::Some(application_configuration::ProxyConfig::EmptyProxyConfig(_)) = self.ProxyConfig {
        } else {
            self.ProxyConfig = ::std::option::Option::Some(application_configuration::ProxyConfig::EmptyProxyConfig(EmptyProxyConfig::new()));
        }
        match self.ProxyConfig {
            ::std::option::Option::Some(application_configuration::ProxyConfig::EmptyProxyConfig(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_empty_proxy_config(&mut self) -> EmptyProxyConfig {
        if self.has_empty_proxy_config() {
            match self.ProxyConfig.take() {
                ::std::option::Option::Some(application_configuration::ProxyConfig::EmptyProxyConfig(v)) => v,
                _ => panic!(),
            }
        } else {
            EmptyProxyConfig::new()
        }
    }

    // .S3ProxyConfig s3_proxy_config = 4;

    pub fn s3_proxy_config(&self) -> &S3ProxyConfig {
        match self.ProxyConfig {
            ::std::option::Option::Some(application_configuration::ProxyConfig::S3ProxyConfig(ref v)) => v,
            _ => <S3ProxyConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_s3_proxy_config(&mut self) {
        self.ProxyConfig = ::std::option::Option::None;
    }

    pub fn has_s3_proxy_config(&self) -> bool {
        match self.ProxyConfig {
            ::std::option::Option::Some(application_configuration::ProxyConfig::S3ProxyConfig(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_s3_proxy_config(&mut self, v: S3ProxyConfig) {
        self.ProxyConfig = ::std::option::Option::Some(application_configuration::ProxyConfig::S3ProxyConfig(v))
    }

    // Mutable pointer to the field.
    pub fn mut_s3_proxy_config(&mut self) -> &mut S3ProxyConfig {
        if let ::std::option::Option::Some(application_configuration::ProxyConfig::S3ProxyConfig(_)) = self.ProxyConfig {
        } else {
            self.ProxyConfig = ::std::option::Option::Some(application_configuration::ProxyConfig::S3ProxyConfig(S3ProxyConfig::new()));
        }
        match self.ProxyConfig {
            ::std::option::Option::Some(application_configuration::ProxyConfig::S3ProxyConfig(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_s3_proxy_config(&mut self) -> S3ProxyConfig {
        if self.has_s3_proxy_config() {
            match self.ProxyConfig.take() {
                ::std::option::Option::Some(application_configuration::ProxyConfig::S3ProxyConfig(v)) => v,
                _ => panic!(),
            }
        } else {
            S3ProxyConfig::new()
        }
    }

    // .HttpServerConfig http_server_config = 5;

    pub fn http_server_config(&self) -> &HttpServerConfig {
        match self.ServerConfig {
            ::std::option::Option::Some(application_configuration::ServerConfig::HttpServerConfig(ref v)) => v,
            _ => <HttpServerConfig as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_http_server_config(&mut self) {
        self.ServerConfig = ::std::option::Option::None;
    }

    pub fn has_http_server_config(&self) -> bool {
        match self.ServerConfig {
            ::std::option::Option::Some(application_configuration::ServerConfig::HttpServerConfig(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_server_config(&mut self, v: HttpServerConfig) {
        self.ServerConfig = ::std::option::Option::Some(application_configuration::ServerConfig::HttpServerConfig(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_server_config(&mut self) -> &mut HttpServerConfig {
        if let ::std::option::Option::Some(application_configuration::ServerConfig::HttpServerConfig(_)) = self.ServerConfig {
        } else {
            self.ServerConfig = ::std::option::Option::Some(application_configuration::ServerConfig::HttpServerConfig(HttpServerConfig::new()));
        }
        match self.ServerConfig {
            ::std::option::Option::Some(application_configuration::ServerConfig::HttpServerConfig(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_server_config(&mut self) -> HttpServerConfig {
        if self.has_http_server_config() {
            match self.ServerConfig.take() {
                ::std::option::Option::Some(application_configuration::ServerConfig::HttpServerConfig(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpServerConfig::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(2);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data_directory_path",
            |m: &ApplicationConfiguration| { &m.data_directory_path },
            |m: &mut ApplicationConfiguration| { &mut m.data_directory_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_size",
            |m: &ApplicationConfiguration| { &m.max_size },
            |m: &mut ApplicationConfiguration| { &mut m.max_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, EmptyProxyConfig>(
            "empty_proxy_config",
            ApplicationConfiguration::has_empty_proxy_config,
            ApplicationConfiguration::empty_proxy_config,
            ApplicationConfiguration::mut_empty_proxy_config,
            ApplicationConfiguration::set_empty_proxy_config,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, S3ProxyConfig>(
            "s3_proxy_config",
            ApplicationConfiguration::has_s3_proxy_config,
            ApplicationConfiguration::s3_proxy_config,
            ApplicationConfiguration::mut_s3_proxy_config,
            ApplicationConfiguration::set_s3_proxy_config,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, HttpServerConfig>(
            "http_server_config",
            ApplicationConfiguration::has_http_server_config,
            ApplicationConfiguration::http_server_config,
            ApplicationConfiguration::mut_http_server_config,
            ApplicationConfiguration::set_http_server_config,
        ));
        oneofs.push(application_configuration::ProxyConfig::generated_oneof_descriptor_data());
        oneofs.push(application_configuration::ServerConfig::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ApplicationConfiguration>(
            "ApplicationConfiguration",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ApplicationConfiguration {
    const NAME: &'static str = "ApplicationConfiguration";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_directory_path = is.read_string()?;
                },
                16 => {
                    self.max_size = is.read_uint64()?;
                },
                26 => {
                    self.ProxyConfig = ::std::option::Option::Some(application_configuration::ProxyConfig::EmptyProxyConfig(is.read_message()?));
                },
                34 => {
                    self.ProxyConfig = ::std::option::Option::Some(application_configuration::ProxyConfig::S3ProxyConfig(is.read_message()?));
                },
                42 => {
                    self.ServerConfig = ::std::option::Option::Some(application_configuration::ServerConfig::HttpServerConfig(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data_directory_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.data_directory_path);
        }
        if self.max_size != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.max_size);
        }
        if let ::std::option::Option::Some(ref v) = self.ProxyConfig {
            match v {
                &application_configuration::ProxyConfig::EmptyProxyConfig(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &application_configuration::ProxyConfig::S3ProxyConfig(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.ServerConfig {
            match v {
                &application_configuration::ServerConfig::HttpServerConfig(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data_directory_path.is_empty() {
            os.write_string(1, &self.data_directory_path)?;
        }
        if self.max_size != 0 {
            os.write_uint64(2, self.max_size)?;
        }
        if let ::std::option::Option::Some(ref v) = self.ProxyConfig {
            match v {
                &application_configuration::ProxyConfig::EmptyProxyConfig(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &application_configuration::ProxyConfig::S3ProxyConfig(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.ServerConfig {
            match v {
                &application_configuration::ServerConfig::HttpServerConfig(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ApplicationConfiguration {
        ApplicationConfiguration::new()
    }

    fn clear(&mut self) {
        self.data_directory_path.clear();
        self.max_size = 0;
        self.ProxyConfig = ::std::option::Option::None;
        self.ProxyConfig = ::std::option::Option::None;
        self.ServerConfig = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ApplicationConfiguration {
        static instance: ApplicationConfiguration = ApplicationConfiguration {
            data_directory_path: ::std::string::String::new(),
            max_size: 0,
            ProxyConfig: ::std::option::Option::None,
            ServerConfig: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ApplicationConfiguration {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ApplicationConfiguration").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ApplicationConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApplicationConfiguration {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ApplicationConfiguration`
pub mod application_configuration {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ApplicationConfiguration.ProxyConfig)
    pub enum ProxyConfig {
        // @@protoc_insertion_point(oneof_field:ApplicationConfiguration.empty_proxy_config)
        EmptyProxyConfig(super::EmptyProxyConfig),
        // @@protoc_insertion_point(oneof_field:ApplicationConfiguration.s3_proxy_config)
        S3ProxyConfig(super::S3ProxyConfig),
    }

    impl ::protobuf::Oneof for ProxyConfig {
    }

    impl ::protobuf::OneofFull for ProxyConfig {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ApplicationConfiguration as ::protobuf::MessageFull>::descriptor().oneof_by_name("ProxyConfig").unwrap()).clone()
        }
    }

    impl ProxyConfig {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ProxyConfig>("ProxyConfig")
        }
    }

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:ApplicationConfiguration.ServerConfig)
    pub enum ServerConfig {
        // @@protoc_insertion_point(oneof_field:ApplicationConfiguration.http_server_config)
        HttpServerConfig(super::HttpServerConfig),
    }

    impl ::protobuf::Oneof for ServerConfig {
    }

    impl ::protobuf::OneofFull for ServerConfig {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ApplicationConfiguration as ::protobuf::MessageFull>::descriptor().oneof_by_name("ServerConfig").unwrap()).clone()
        }
    }

    impl ServerConfig {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<ServerConfig>("ServerConfig")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13configuration.proto\"\x12\n\x10EmptyProxyConfig\"\x97\x01\n\rS3Pro\
    xyConfig\x12\x16\n\x06bucket\x18\x01\x20\x01(\tR\x06bucket\x12\x16\n\x06\
    region\x18\x02\x20\x01(\tR\x06region\x12\x1a\n\x08endpoint\x18\x03\x20\
    \x01(\tR\x08endpoint\x12\x1b\n\tsecret_id\x18\x04\x20\x01(\tR\x08secretI\
    d\x12\x1d\n\naccess_key\x18\x05\x20\x01(\tR\taccessKey\"E\n\x10HttpServe\
    rConfig\x12\x1d\n\nip_address\x18\x01\x20\x01(\tR\tipAddress\x12\x12\n\
    \x04port\x18\x02\x20\x01(\x03R\x04port\"\xc4\x02\n\x18ApplicationConfigu\
    ration\x12.\n\x13data_directory_path\x18\x01\x20\x01(\tR\x11dataDirector\
    yPath\x12\x19\n\x08max_size\x18\x02\x20\x01(\x04R\x07maxSize\x12A\n\x12e\
    mpty_proxy_config\x18\x03\x20\x01(\x0b2\x11.EmptyProxyConfigH\0R\x10empt\
    yProxyConfig\x128\n\x0fs3_proxy_config\x18\x04\x20\x01(\x0b2\x0e.S3Proxy\
    ConfigH\0R\rs3ProxyConfig\x12A\n\x12http_server_config\x18\x05\x20\x01(\
    \x0b2\x11.HttpServerConfigH\x01R\x10httpServerConfigB\r\n\x0bProxyConfig\
    B\x0e\n\x0cServerConfigb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(EmptyProxyConfig::generated_message_descriptor_data());
            messages.push(S3ProxyConfig::generated_message_descriptor_data());
            messages.push(HttpServerConfig::generated_message_descriptor_data());
            messages.push(ApplicationConfiguration::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
